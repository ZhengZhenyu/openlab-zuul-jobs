- name: Set up Kubernetes local cluster
  hosts: all
  roles:
    - install-k8s-jobs-dependences
  become: yes
  tasks:
    - name: Set up Kubernetes local cluster
      shell:
        cmd: |
          set -e
          apt-get install python-pip -y
          pip install -U python-openstackclient

          # NOTE: the following commands may include sensitive information please do not print in job logs
          export OS_PASSWORD="`echo {{ telekom_credentials.password }}`"
          export OS_AUTH_TYPE="`echo {{ telekom_credentials.auth_type }}`"
          export OS_AUTH_URL="`echo {{ telekom_credentials.auth_url }}`"
          export OS_IDENTITY_API_VERSION="`echo {{ telekom_credentials.identity_api_version }}`"
          export OS_DOMAIN_NAME="`echo {{ telekom_credentials.domain_name }}`"
          export OS_PROJECT_NAME="`echo {{ telekom_credentials.project_name}}`"
          export OS_REGION_NAME="`echo {{ telekom_credentials.region_name}}`"
          export OS_TENANT_NAME="`echo {{ telekom_credentials.project_name }}`"
          export OS_USERNAME="`echo {{ telekom_credentials.user_name }}`"
          export OS_ACCESS_KEY="`echo {{ telekom_credentials.access_key }}`"
          export OS_SECRET_KEY="`echo {{ telekom_credentials.secret_key }}`"
          if [[ ! -d "/etc/kubernetes/" ]]; then
              sudo mkdir -p /etc/kubernetes/
          fi
          chown zuul /etc/kubernetes/
          cat << EOF >> /etc/kubernetes/cloud-config
          [Global]
          domain-name= ${OS_DOMAIN_NAME}
          tenant-name = ${OS_TENANT_NAME}
          auth-url = ${OS_AUTH_URL}
          password = ${OS_PASSWORD}
          username = ${OS_USERNAME}
          region = ${OS_REGION_NAME}
          [BlockStorage]
          bs-version = v2
          EOF

          cat << EOF >> /etc/kubernetes/webhook.kubeconfig
          apiVersion: v1
          clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: https://localhost:8443/webhook
            name: webhook
          contexts:
          - context:
              cluster: webhook
              user: webhook
            name: webhook
          current-context: webhook
          kind: Config
          preferences: {}
          users:
          - name: webhook
          EOF

          set -x
          make depend
          make build
          mkdir -p "{{ ansible_user_dir }}/.kube"
          export API_HOST_IP="172.17.0.1"
          export KUBELET_HOST="0.0.0.0"

          echo "Stopping firewall and allow all traffic..."
          iptables -F
          iptables -X
          iptables -t nat -F
          iptables -t nat -X
          iptables -t mangle -F
          iptables -t mangle -X
          iptables -P INPUT ACCEPT
          iptables -P FORWARD ACCEPT
          iptables -P OUTPUT ACCEPT
          export ALLOW_SECURITY_CONTEXT=true
          export ENABLE_CRI=false
          export ENABLE_HOSTPATH_PROVISIONER=true
          export ENABLE_SINGLE_CA_SIGNER=true
          # export KUBE_ENABLE_CLUSTER_DASHBOARD=true
          export KUBE_ENABLE_CLUSTER_DNS=false
          export LOG_LEVEL=10
          # we want to use the openstack cloud provider
          export CLOUD_PROVIDER=openstack
          # we want to run a separate cloud-controller-manager for openstack
          export EXTERNAL_CLOUD_PROVIDER=true
          # DO NOT change the location of the cloud-config file. It is important for the old cinder provider to work
          export CLOUD_CONFIG=/etc/kubernetes/cloud-config
          # specify the OCCM binary
          export EXTERNAL_CLOUD_PROVIDER_BINARY="{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/openstack-cloud-controller-manager"
          # Cleanup some directories just in case
          sudo rm -rf /var/lib/kubelet/*

          # location of where the kubernetes processes log their output
          mkdir -p /opt/stack/logs/
          export LOG_DIR=/opt/stack/logs
          # We need this for one of the conformance tests
          export ALLOW_PRIVILEGED=true
          # Just kick off all the processes and drop down to the command line
          export ENABLE_DAEMON=true
          # We need the hostname to match the name of the vm started by openstack
          export HOSTNAME_OVERRIDE=$(curl http://169.254.169.254/openstack/latest/meta_data.json | python -c "import sys, json; print json.load(sys.stdin)['name']")

          pushd ${GOPATH}/src/k8s.io/kubernetes
          export AUTHORIZATION_MODE="Webhook,Node"
          sed 's/curl --max-time 1/curl --max-time 5/g' -i ./hack/lib/util.sh
          sed '555 a \      --authentication-token-webhook-config-file=/etc/kubernetes/webhook.kubeconfig \\'  -i ./hack/local-up-cluster.sh
          sed '555 a \      --authorization-webhook-config-file=/etc/kubernetes/webhook.kubeconfig \\'  -i ./hack/local-up-cluster.sh
          sed '583 a \    sleep 7200'  -i ./hack/local-up-cluster.sh
          nohup "{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/k8s-keystone-auth" \
                --v=4 \
                --log-dir=${LOG_DIR} \
                --tls-cert-file /var/run/kubernetes/serving-kube-apiserver.crt \
                --tls-private-key-file /var/run/kubernetes/serving-kube-apiserver.key \
                --keystone-policy-file /etc/kubernetes/policy.json \
                --log-dir=${LOG_DIR} \
                --v=10 \
                --keystone-url  ${OS_AUTH_URL} > /dev/null 2>&1 &
          # -E preserves the current env vars, but we need to special case PATH
          sudo -E PATH=$PATH SHELLOPTS=$SHELLOPTS ./hack/local-up-cluster.sh -O

          # sudo of local-up-cluster mucks with permissions
          sudo chmod -R 777 "{{ ansible_user_dir }}/.kube"
          sudo chmod 777 /var/run/kubernetes/client-admin.key

          # set up the config we need for kubectl to work
          cluster/kubectl.sh config set-cluster local --server=https://localhost:6443 --certificate-authority=/var/run/kubernetes/server-ca.crt
          cluster/kubectl.sh config set-credentials myself --client-key=/var/run/kubernetes/client-admin.key --client-certificate=/var/run/kubernetes/client-admin.crt
          cluster/kubectl.sh config set-context local --cluster=local --user=myself
          cluster/kubectl.sh config use-context local

          # Hack for RBAC for all for the new cloud-controller process, we need to do better than this
          cluster/kubectl.sh create clusterrolebinding --user system:serviceaccount:kube-system:default kube-system-cluster-admin-1 --clusterrole cluster-admin
          cluster/kubectl.sh create clusterrolebinding --user system:serviceaccount:kube-system:pvl-controller kube-system-cluster-admin-2 --clusterrole cluster-admin
          cluster/kubectl.sh create clusterrolebinding --user system:serviceaccount:kube-system:cloud-node-controller kube-system-cluster-admin-3 --clusterrole cluster-admin
          cluster/kubectl.sh create clusterrolebinding --user system:serviceaccount:kube-system:cloud-controller-manager kube-system-cluster-admin-4 --clusterrole cluster-admin
          cluster/kubectl.sh create clusterrolebinding --user system:serviceaccount:kube-system:shared-informers kube-system-cluster-admin-5 --clusterrole cluster-admin
          cluster/kubectl.sh create clusterrolebinding --user system:kube-controller-manager  kube-system-cluster-admin-6 --clusterrole cluster-admin

          cluster/kubectl.sh config set-credentials openstackuser --auth-provider=openstack
          cluster/kubectl.sh config set-context --cluster=kubernetes --user=openstackuser openstackuser@kubernetes
          cluster/kubectl.sh config use-context openstackuser@kubernetes
          cluster/kubectl.sh create rolebinding username-view --clusterrole view --user username --namespace default
          cluster/kubectl.sh get pods
          TOKEN=$(openstack token issue -f value -c id)
          cluster/kubectl.sh --token $TOKEN get po or curl -k -v -XGET -H "Accept: application/json" -H "Authorization: Bearer $TOKEN" https://localhost:6443/api/v1/namespaces/default/pods
          cat << EOF | curl -kvs -XPOST -d @- https://localhost:8443/webhook | python -mjson.tool
          {
            "apiVersion": "authentication.k8s.io/v1beta1",
            "kind": "TokenReview",
            "metadata": {
                "creationTimestamp": null
            },
            "spec": {
                "token": "$TOKEN"
            }
          }
          EOF

          cat << EOF | curl -kvs -XPOST -d @- https://localhost:8443/webhook | python -mjson.tool
          {
            "apiVersion": "authorization.k8s.io/v1beta1",
            "kind": "SubjectAccessReview",
            "spec": {
                "resourceAttributes": {
                    "namespace": "kittensandponies",
                    "verb": "get",
                    "group": "unicorn.example.org",
                    "resource": "pods"
                },
                "user": "jane",
                "group": [
                    "group1",
                    "group2"
                ]
            }
          }
          EOF
          popd

        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ golang_env }}'
