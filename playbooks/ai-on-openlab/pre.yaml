- name: AI On Openlab Pre Job
  hosts: all
  become: yes
  tasks:
    - name: Get build id
      shell: echo '{{zuul.build}}' | cut -c 1-7
      register: build_id

    - name: Set Default Hardware type Parameters
      set_fact:
        user_file: "user_data"
      when: not is_gpu_enabled

    - name: Split Hardware type Parameters for GPU
      set_fact:
        user_file: "user_data_gpu"
      when: is_gpu_enabled

    - name: Cleanup wrong iptables rules locally
      no_log: yes
      shell:
        cmd: |
          set -xe
          exist=`iptables -S | grep openstack-INPUT`
          if [ ! -z "$exist" ];then
            iptables -F
          fi
        executable: /bin/bash

    - name: Temp Key File Name
      no_log: yes
      set_fact:
        key_file_name: "tmp_key"

    - name: Process available internal and external forwarding ports
      no_log: yes
      shell:
        cmd: |
          set -xe
          echo "{{ ai_otc_forwarding_host.ssh_private_key }}" > "./{{ key_file_name }}"
          chmod 400 "./{{ key_file_name }}"
          cat > get_external_ports.sh <<EOF
          cat /home/ubuntu/ai_nat_outside_ports
          EOF

          result=`ssh -o StrictHostKeyChecking=no {{ ai_otc_forwarding_host.ssh_username }}@{{ ai_otc_forwarding_host.fqdn }} -i ./{{ key_file_name }} 'bash -s' < get_external_ports.sh`

          while :
          do
            choose=`shuf -i 60000-61000 -n 1`
            for i in $result;
            do
              if [ $i == $choose ];then
                break
              fi
            done
            break
          done
          echo $choose > choosed_port
          cat > upload_external_ports.sh <<EOF
          sudo echo $choose >> /home/ubuntu/ai_nat_outside_ports
          EOF
          ssh -o StrictHostKeyChecking=no {{ ai_otc_forwarding_host.ssh_username }}@{{ ai_otc_forwarding_host.fqdn }} -i ./{{ key_file_name }} 'bash -s' < upload_external_ports.sh
        executable: /bin/bash

    - name: Get availave external ports
      shell: cat choosed_port
      register: ext_port

    - name: Setup internal forwarding rules
      no_log: yes
      shell:
        cmd: |
          set -xe
          dnat_chain="{{ zuul.change }}-{{ build_id.stdout }}"
          snat_chain="{{ zuul.change }}-{{ build_id.stdout }}-snat"
          dst_ip="{{ ansible_all_ipv4_addresses | first }}"
          snat_ip="{{ ai_otc_forwarding_host.fqdn }}"
          dst_ext_port="{{ ext_port.stdout }}"
          dnat_ip_port=$dst_ip:22
          cat > setup_iptables.sh <<EOF
          sudo su - root
          sudo iptables -t nat -N $dnat_chain
          sudo iptables -t nat -N $snat_chain
          sudo iptables -t nat -A test-ai -j $dnat_chain
          sudo iptables -t nat -A test-ai-snat -j $snat_chain
          sudo iptables -t nat -A $dnat_chain -i ens3 -p tcp -m tcp --dport $dst_ext_port -j DNAT --to-destination $dnat_ip_port
          sudo iptables -t nat -A $snat_chain -d $dst_ip -o ens3 -p tcp -m tcp --dport 22 -j SNAT --to-source $snat_ip
          EOF
          ssh -o StrictHostKeyChecking=no {{ ai_otc_forwarding_host.ssh_username }}@{{ ai_otc_forwarding_host.fqdn }} -i ./{{ key_file_name }} 'bash -s' < setup_iptables.sh
        executable: /bin/bash

    - name: Clean up key file
      no_log: yes
      shell:
        cmd: |
          rm -rf "./{{ key_file_name }}"
        executable: /bin/bash

    - name: Get IP and Credential
      shell:
        cmd: |
          set -x
          set -e

          useradd demo -p 'demo'
          echo 'demo:demo' | chpasswd
          usermod -s /bin/bash demo
          mkdir /home/demo
          chown demo:demo /home/demo
          sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          service sshd restart

          if {{ env_keeping | lower }};then
            result_url=""
          else
            result_url="http://80.158.7.210/logs/{{ zuul.change }}/{{ zuul.change }}/{{ zuul.patchset }}/check/{{ zuul.job }}/{{ build_id.stdout }}/test_results/"
          fi

          cat > '{{ zuul.patchset }}.json' <<EOF
          {
            "patch_set": "{{ zuul.patchset }}"
            "ip": "80.158.7.210:{{ ext_port.stdout }}",
            "credentail": "demo/demo",
            "result_url": "$result_url",
            "endpoint": ""
          }
          EOF
        executable: /bin/bash

    - name: Upload Environment Info to Web
      shell:
        cmd: |
          apt install -y python-pip
          pip install pygithub

          source_file=`ls "{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/{{ user_file }}/" | grep moo-job`
          job_name=$(echo $source_file | cut -d . -f1)
          job_name=${job_name/_sleep/}
          if {{ env_keeping | lower }};then
            result_url=""
            endpoint="{{ ansible_all_ipv4_addresses | first }}:8500"
          else
            change_num="{{ zuul.change }}"
            change_prefix=`echo ${change_num:0-2}`
            result_url="http://80.158.7.210/logs/$change_prefix/$change_num/{{ zuul.patchset }}/check/{{ zuul.job }}/{{ build_id.stdout }}/test_results/"
            endpoint=""
          fi
          wget https://raw.githubusercontent.com/moo-ai/moo-ai.github.io/master/env_info/task_list.json

          cat > 'json_output.py' <<EOF
          import json
          exist_data = None
          with open('task_list.json') as json_file:
              exist_data = json.load(json_file)

          ip_addr = "{{ ansible_all_ipv4_addresses | first }}"

          exist_data["$job_name"] = {
              "patch_set": "{{ zuul.patchset }}",
              "ip": "{{ ansible_all_ipv4_addresses | first }}",
              "credential": "demo/demo",
              "result_url": "$result_url",
              "endpoint": "$endpoint"
          }
          with open('task_list.json_tmp', 'w') as file:
              json.dump(exist_data, file)
          EOF

          python json_output.py
          cat task_list.json_tmp | python -m json.tool > task_list.json

          cat > 'upload_env_info.py' <<EOF
          import github
          import sys

          file_name = sys.argv[1]

          with open(file_name) as f:
              cont = f.read()

          github_obj = github.Github('moo-ai', 'mooopenlab1')
          repo = github_obj.get_user().get_repo('moo-ai.github.io')
          try:
              contents = repo.get_contents('env_info/task_list.json', ref="master")
          except github.UnknownObjectException:
              exit(1)

          repo.update_file(contents.path, "upload $job_name ci job", cont, contents.sha, branch="master")
          EOF

          python upload_env_info.py task_list.json
          curl -L "https://github.com/moo-ai/moo-ai.github.io/raw/master/env_info/task_list.json"
        executable: /bin/bash

    - name: debug var
      debug:
        msg="hostvars ======= {{ hostvars }}"