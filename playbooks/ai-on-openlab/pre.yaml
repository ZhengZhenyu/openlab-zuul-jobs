- name: AI On Openlab Pre Job
  hosts: wolegequ
  become: yes
  tasks:

  - name: Get build id
    shell: echo '{{zuul.build}}' | cut -c 1-7
    register: build_id

  - name: Get IP and Credential
    shell:
      cmd: |
        set -x
        set -e

        useradd demo -p 'demo'
        echo 'demo:demo' | chpasswd
        usermod -s /bin/bash demo
        mkdir /home/demo
        chown demo:demo /home/demo
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        service sshd restart

        cat > '{{ zuul.patchset }}.json' <<EOF
        {
          "ip": "{{ ansible_all_ipv4_addresses }}",
          "build_id": "{{ build_id.stdout }}"
        }
        EOF
      executable: /bin/bash

  - name: Upload Environment Info to Web
    shell:
      cmd: |
        apt install -y python-pip
        pip install pygithub

        cat > 'upload_env_info.py' <<EOF
        import github
        import sys

        file_name = sys.argv[1]

        github_obj = github.Github('moo-ai', 'mooopenlab1')
        repo = github_obj.get_user().get_repo('moo-ai.github.io')
        try:
            repo.get_file_contents('env_info/{{ zuul.patchset }}.json')
        except github.UnknownObjectException:
            with open(file_name, 'rb') as env_info:
                data = env_info.read()
                repo.create_file(path='env_info/' + file_name,
                                 message='Upload env info',
                                 content=data,
                                 branch='master')
        EOF

        python upload_env_info.py '{{ zuul.patchset }}.json'
      executable: /bin/bash

    - name: Get User Metadata Zip or Url
      shell:
        cmd: |
          set -x
          set -e

          apt install -y unzip
          pip install pyyaml

          result_folder="{{ ansible_user_dir }}/workspace/test_results/"
          mkdir -p $result_folder

          user_data_folder='{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/'
          cd $user_data_folder

          if ls | grep txt;then
            txt_file=`ls | grep txt`
            url=`cat $txt_file`
            if [ -n "$url" ];then
              wget $url
            fi
          fi

          zip_file=`ls | grep zip`

          unzip $zip_file
          python '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/tools/analysis_yaml.py'
        executable: /bin/bash

    - name: Get Runtime Info
      shell: cat '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/framework_runtime.txt'
      register: runtime

    - name: Defind Parameters - runtime_name
      shell: echo "{{ runtime.stdout | regex_replace('[\\d+\\.*]+', '') }}"
      register: runtime_name

    - name: Defind Parameters - runtime_version
      shell: echo "{{ runtime.stdout | regex_replace('[java|go|python|c|c++]', '') }}"
      register: runtime_version

    - name: Get Framework Name
      shell: cat '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/framework_name.txt'
      register: framework

    - name: Get Framework Version
      shell: cat '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/framework_version.txt'
      register: framework_version

    - name: Get User Entry Point
      shell: cat '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/entry_point.txt'
      register: entrypoint

    - name: Check output folder variable exists
      stat:
        path: '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/output_folder.txt'
      register: stat_ouput_folder_variable

    - name: Get output folder variable value
      when: stat_ouput_folder_variable.stat.exists
      shell: cat '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/output_folder.txt'
      register: output_folder_name

    - name: Check output folder exists
      stat:
        path: '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/{{ output_folder_name.stdout }}'
      register: stat_ouput_folder

    - name: debug var
      debug:
        msg="hostvars ======= {{ hostvars['wolegequ'] }}"