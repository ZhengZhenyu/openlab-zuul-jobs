- hosts: k8s-master
  become: yes
  tasks:
    - name: prepare k8s namespaces for volcano and TFjobs
      shell:
        cmd: |
          set -ex
          cat <<EOF | kubectl create -f -
          apiVersion: v1
          kind: Namespace
          metadata:
           name: volcano
           annotations:
             scheduler.alpha.kubernetes.io/node-selector: env=system
          spec: {}
          status: {}
          EOF

          cat <<EOF | kubectl create -f -
          apiVersion: v1
          kind: Namespace
          metadata:
           name: vc-tfbenchmarks
           annotations:
             scheduler.alpha.kubernetes.io/node-selector: env=workload
          spec: {}
          status: {}
          EOF
          sed -i '/--enable-admission-plugins/ s/$/,PodNodeSelector/' /etc/kubernetes/manifests/kube-apiserver.yaml
          sleep 30
        executable: /bin/bash

    - name: create vc-tfbenchmarks directory
      file: path="{{ ansible_user_dir }}/workspace/vc-tfbenchmarks/{{ item }}" state=directory
      with_items:
        - case1
        - case2
        - case3
        - case4

    - name: customize volcano tfbenchmarks templates
      become: yes
      template:
        dest: "{{ ansible_user_dir }}/workspace/vc-tfbenchmarks/{{ item.case }}/{{ item.name }}.yaml"
        src: "vc-tfbenchmarks.yaml.j2"
      vars:
        vc_tfbenchmarks_name: "{{ item.name }}"
        ps_replicas: "{{ item.ps_replicas }}"
        worker_replicas: "{{ item.worker_replicas }}"
        ps_cpu: "{{ item.ps_cpu }}"
        ps_mem: "{{ item.ps_mem }}"
        worker_cpu: "{{ item.worker_cpu }}"
        worker_mem: "{{ item.worker_mem }}"
        minavailable: "{{ item.minavailable }}"
      with_items:
        - { case: "case1", name: "vc-tfbenchmarks-1", ps_replicas: 1, worker_replicas: 1,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi, minavailable: 2}
        - { case: "case2", name: "vc-tfbenchmarks-1", ps_replicas: 1, worker_replicas: 2,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 4000m, worker_mem: 3800Mi, minavailable: 3}
        - { case: "case3", name: "vc-tfbenchmarks-1", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi, minavailable: 6}
        - { case: "case4", name: "vc-tfbenchmarks-1", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi, minavailable: 6}
        - { case: "case4", name: "vc-tfbenchmarks-2", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi, minavailable: 6}
        - { case: "case4", name: "vc-tfbenchmarks-3", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi, minavailable: 6}
        - { case: "case4", name: "vc-tfbenchmarks-4", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi, minavailable: 6}
        - { case: "case4", name: "vc-tfbenchmarks-5", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi, minavailable: 6}

    - name: deploy volcano
      shell: |
        set -ex
        mkdir -p src/volcano.sh/
        git clone https://github.com/volcano-sh/volcano src/volcano.sh/volcano
        pushd src/volcano.sh/volcano
        curl -L https://git.io/get_helm.sh | bash
        helm init
        kubectl --namespace kube-system create serviceaccount tiller
        kubectl create clusterrolebinding tiller-cluster-rule \
         --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
        kubectl --namespace kube-system patch deploy tiller-deploy \
         -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'

        sleep 30
        kubectl -n kube-system wait --timeout 300s --for condition=ready pod --all
        helm version
        helm plugin install installer/chart/volcano/plugins/gen-admission-secret
        helm gen-admission-secret --service volcano-trial-admission-service --namespace volcano
        helm install installer/chart/volcano --namespace volcano --name volcano-trial
        kubectl -n volcano get pods -o wide
        kubectl -n volcano get svc
        sleep 10
        kubectl -n volcano wait --timeout 300s --for condition=ready pod --all
      args:
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}'

    - name: run tensorflow benchmarks
      shell: |
        set -ex
        kubectl -n vc-tfbenchmarks create -f "{{ ansible_user_dir }}/workspace/vc-tfbenchmarks/{{ item }}"
        sleep 20
        kubectl -n vc-tfbenchmarks get job.batch.volcano.sh
        kubectl -n vc-tfbenchmarks get pods -o wide

        function tfjobs_status() {
            kubectl -n vc-tfbenchmarks get job.batch.volcano.sh -o jsonpath='{.items[*].status.state.phase}'|uniq
        }
        export -f tfjobs_status

        function get_tfjobs() {
            kubectl -n vc-tfbenchmarks get job.batch.volcano.sh -o=custom-columns=NAME:.metadata.name,STATUS:.status.state.phase,CREATED_AT:.metadata.creationTimestamp
        }
        export -f get_tfjobs

        exit_code=0
        set +x
        timeout 120 bash -c '
            while :
            do
                job_status=$(tfjobs_status)
                echo "======================================================="
                if echo ${job_status} |grep -E "Running|Pending|Created|Inqueue" > /dev/null; then
                    echo "There are TFjobs still in running or inqueue status..."
                    get_tfjobs
                else
                   echo "All TFjobs run complate!"
                   get_tfjobs
                   break
                fi
                sleep 30
            done
            ' || exit_code=$?
        set -x
        set +e
        result_path="{{ ansible_user_dir }}/workspace/test_results/volcano/{{ item }}"
        mkdir -p ${result_path}/{pods_logs,jobs_logs}

        if [ ! -d "${result_path}/../templates" ]; then
            mkdir -p ${result_path}/../templates
            cp -r vc-tfbenchmarks/*  ${result_path}/../templates/
        fi

        jobs_names=$(kubectl -n vc-tfbenchmarks get job.batch.volcano.sh -o custom-columns=NAME:.metadata.name --no-headers |grep benchmark)
        for job_name in ${jobs_names}; do
            kubectl -n vc-tfbenchmarks describe ${job_name} > ${result_path}/jobs_logs/${job_name}.log
        done

        jobs_pods=$(kubectl -n vc-tfbenchmarks get pods -o custom-columns=NAME:.metadata.name --no-headers |grep benchmark)
        for job_pod in ${jobs_pods}; do
            kubectl -n vc-tfbenchmarks logs ${job_pod} > ${result_path}/pods_logs/${job_pod}.log
        done

        kubectl -n vc-tfbenchmarks delete -f "{{ ansible_user_dir }}/workspace/vc-tfbenchmarks/{{ item }}"
        sleep 180
        kubectl -n vc-tfbenchmarks get job.batch.volcano.sh
      args:
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      with_items:
        - case1
        - case2
        - case3
        - case4

    - name: volcano env cleanup
      shell: |
        set -x
        helm delete volcano-trial --purge
        sleep 60
        kubectl get pods -o wide -A
        kubectl -n kubeflow get pods -o wide
      args:
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}'
