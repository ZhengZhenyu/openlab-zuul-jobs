- hosts: k8s-master
  become: yes
  roles:
    - role: deploy-k8s-cluster-with-kubeadm
      k8s_role_to_deploy:
        - master
  tasks:
    - name: get kubeadm join command
      shell: kubeadm token create --print-join-command
      register: kubeadm_join_cmd

- hosts: k8s-nodes
  become: yes
  roles:
    - role: deploy-k8s-cluster-with-kubeadm
      k8s_role_to_deploy:
        - node
      kubeadm_join_cmd: "{{ hostvars['k8s-master']['kubeadm_join_cmd']['stdout'] }}"

- hosts: k8s-master
  become: yes
  roles:
    - config-golang
  tasks:
    - name: Deploy volcano and run tensorflow benchmarks
      shell: |
        set -ex
        mkdir -p $GOPATH/src/volcano.sh/
        git clone https://github.com/volcano-sh/volcano $GOPATH/src/volcano.sh/volcano
        pushd $GOPATH/src/volcano.sh/volcano
        curl -L https://git.io/get_helm.sh | bash
        helm init
        kubectl --namespace kube-system create serviceaccount tiller
        kubectl create clusterrolebinding tiller-cluster-rule \
         --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
        kubectl --namespace kube-system patch deploy tiller-deploy \
         -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'

        sleep 30
        kubectl -n kube-system wait --timeout 300s --for condition=ready pod --all
        helm version
        helm plugin install installer/chart/volcano/plugins/gen-admission-secret
        kubectl create namespace volcano-trial
        helm gen-admission-secret --service volcano-trial-admission-service --namespace volcano-trial
        helm install installer/chart/volcano --namespace volcano-trial --name volcano-trial
        kubectl -n volcano-trial get pods
        kubectl -n volcano-trial get svc
        sleep 30
        kubectl -n volcano-trial wait --timeout 300s --for condition=ready pod --all

        # workaround
        sed -i -e '/\  plugins:/a \    env: []' example/integrations/tensorflow/tf-example.yaml

        kubectl -n volcano-trial create -f example/integrations/tensorflow/
        kubectl -n volcano-trial get job.batch.volcano.sh

        function tfjobs_status() {
            kubectl -n volcano-trial get job.batch.volcano.sh -o jsonpath='{.items[*].status.state.phase}'|uniq
        }

        timeout 7200 bash -c '
            while :
            do
                jobs_status = $(tfjobs_status)
                if [[ ${job_status} == Running ]]; then
                    echo "Waiting for TF jobs running..."
                elif echo ${job_status} |grep Failed;
                    echo "Some TFjobs has failed :("
                    kubectl -n volcano-trial get job.batch.volcano.sh
                    exit 1
                elif [[ ${job_status} == Completed ]]; then
                   echo "TFjobs running Succeeded :)"
                   kubectl -n volcano-trial get job.batch.volcano.sh
                   break
                fi
                sleep 30
            done
            '
        mkdir -p {{ RESULTS_PATH }}/tfjobs/
        job_pods = $(kubectl -n volcano-trial get pods -o custom-columns=NAME:.metadata.name --no-headers |grep benchmark)
        for job_pod in ${job_pods}; do
            kubectl -n volcano-trial logs ${job_pod} > {{ RESULTS_PATH }}/tfjobs/${job_pod}.log
        done

        kubectl -n volcano-trial delete -f example/integrations/tensorflow/
        helm delete integration --purge
      args:
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ global_env }}'
