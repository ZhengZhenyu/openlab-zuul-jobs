- hosts: k8s-master
  become: yes
  tasks:
    - name: prepare k8s namespaces for kubeflow and TFjobs
      shell:
        cmd: |
          set -ex
          cat <<EOF | kubectl create -f -
          apiVersion: v1
          kind: Namespace
          metadata:
           name: kubeflow
           annotations:
             scheduler.alpha.kubernetes.io/node-selector: env=system
          spec: {}
          status: {}
          EOF

          cat <<EOF | kubectl create -f -
          apiVersion: v1
          kind: Namespace
          metadata:
           name: kf-tfbenchmarks
           annotations:
             scheduler.alpha.kubernetes.io/node-selector: env=workload
          spec: {}
          status: {}
          EOF
          CURRENT_CONTEXT=$(kubectl config current-context)
          CURRENT_CLUSTER=$(kubectl config get-contexts $CURRENT_CONTEXT | tail -1 | awk '{print $3}')
          CURRENT_USER=$(kubectl config get-contexts $CURRENT_CONTEXT | tail -1 | awk '{print $4}')
          kubectl config set-context kf-tfbenchmarks \
            --namespace kf-tfbenchmarks \
            --cluster $CURRENT_CLUSTER \
            --user $CURRENT_USER
          sed -i '/--enable-admission-plugins/ s/$/,PodNodeSelector/' /etc/kubernetes/manifests/kube-apiserver.yaml
          sleep 30
        executable: /bin/bash

    - name: config PVs for kubeflow deployment
      shell:
        cmd: |
          set -ex
          apt-get install -y nfs-server
          export KUBECONFIG=/etc/kubernetes/admin.conf
          for i in `seq 1 3`;do
              mkdir -p /nfs-data/kubeflow-pv$i
              echo "/nfs-data/kubeflow-pv$i *(rw,sync,no_root_squash,no_subtree_check)" >> /etc/exports
              systemctl restart nfs-kernel-server.service
              cat << EOF >> kubeflow-pv$i.yaml
              apiVersion: v1
              kind: PersistentVolume
              metadata:
                name: kubeflow-pv$i
              spec:
                capacity:
                  storage: 20Gi
                accessModes:
                  - ReadWriteOnce
                nfs:
                  server: {{ ansible_host }}
                  path: /nfs-data/kubeflow-pv$i
          EOF
              kubectl create -f kubeflow-pv$i.yaml
          done
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'

    - name: deploy kubeflow
      shell: |
        set -ex
        wget https://github.com/kubeflow/kubeflow/releases/download/v0.5.0/kfctl_v0.5.0_linux.tar.gz
        tar -zxvf kfctl_*.tar.gz -C /usr/local/bin/
        export KFAPP="kfapp"
        kfctl init ${KFAPP} -v v0.5.0
        pushd ${KFAPP}
        kfctl generate all -V
        kfctl apply all -V
        kubectl -n kubeflow get all -o wide
        popd
        # pushd ${KFAPP}
        # kfctl delete all --delete_storage
        # popd
        kubectl -n kubeflow wait --timeout 300s --for condition=ready pod --all
      args:
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'

    - name: create kf-tfbenchmarks directory
      file: path="{{ ansible_user_dir }}/workspace/kf-tfbenchmarks/{{ item }}" state=directory
      with_items:
        - case1
        - case2
        - case3
        - case4

    - name: customize kubeflow tfbenchmarks templates
      become: yes
      template:
        dest: "{{ ansible_user_dir }}/workspace/kf-tfbenchmarks/{{ item.case }}/{{ item.name }}.yaml"
        src: "kf-tfbenchmarks.yaml.j2"
      vars:
        kf_tfbenchmarks_name: "{{ item.name }}"
        ps_replicas: "{{ item.ps_replicas }}"
        worker_replicas: "{{ item.worker_replicas }}"
        ps_cpu: "{{ item.ps_cpu }}"
        ps_mem: "{{ item.ps_mem }}"
        worker_cpu: "{{ item.worker_cpu }}"
        worker_mem: "{{ item.worker_mem }}"
        minavailable: 6
      with_items:
        - { case: "case1", name: "kf-tfbenchmarks-1", ps_replicas: 1, worker_replicas: 1,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi }
        - { case: "case2", name: "kf-tfbenchmarks-1", ps_replicas: 1, worker_replicas: 2,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 4000m, worker_mem: 3800Mi }
        - { case: "case3", name: "kf-tfbenchmarks-1", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi }
        - { case: "case4", name: "kf-tfbenchmarks-1", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi }
        - { case: "case4", name: "kf-tfbenchmarks-2", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi }
        - { case: "case4", name: "kf-tfbenchmarks-3", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi }
        - { case: "case4", name: "kf-tfbenchmarks-4", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi }
        - { case: "case4", name: "kf-tfbenchmarks-5", ps_replicas: 2, worker_replicas: 4,
            ps_cpu: 1000m, ps_mem: 1000Mi, worker_cpu: 2000m, worker_mem: 3800Mi }

    - name: run tensorflow benchmarks
      shell: |
        set -ex
        kubectl -n kf-tfbenchmarks create -f "{{ ansible_user_dir }}/workspace/kf-tfbenchmarks/case4"
        sleep 10
        kubectl -n kf-tfbenchmarks get tfjobs -o wide
        kubectl -n kf-tfbenchmarks get pods -o wide
        kubectl -n kf-tfbenchmarks wait --timeout 300s --for condition=Running tfjobs --all
        sleep 100000000

        function tfjobs_status() {
            kubectl -n kf-tfbenchmarks get tfjobs --no-headers | awk '{print $2}'|uniq > /dev/null
        }
        export -f tfjobs_status
        exit_code=0
        set +x
        timeout 7200 bash -c '
            while :
            do
                job_status=$(tfjobs_status)
                echo "======================================================="
                if echo ${job_status} |grep -E "Running|Pending|Created" > /dev/null; then
                    echo "There are TFjobs still in running or pending status..."
                    kubectl -n kf-tfbenchmarks get tfjobs
                else
                   echo "All TFjobs run complate!"
                   kubectl -n kf-tfbenchmarks get tfjobs
                   break
                fi
                sleep 30
            done
            ' || exit_code=$?
      args:
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'


    - name: collect testing results
      shell: |
        # TODO
        kubectl -n kf-tfbenchmarks get tfjobs
      args:
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'

    - name: kubeflow env cleanup
      shell: |
        kubectl -n kf-tfbenchmarks create -f "{{ ansible_user_dir }}/workspace/kf-tfbenchmarks/case4"
        mkdir -p '{{ ansible_user_dir }}/workspace/test_results/tfjobs/'
        job_pods = $(kubectl -n kf-tfbenchmarks get pods -o custom-columns=NAME:.metadata.name --no-headers |grep benchmark)
        for job_pod in ${job_pods}; do
            kubectl -n kf-tfbenchmarks logs ${job_pod} > "{{ ansible_user_dir }}/workspace/test_results/tfjobs/${job_pod}.log"
        done
        kubectl -n kf-tfbenchmarks delete -f "{{ ansible_user_dir }}/workspace/kf-tfbenchmarks/case4"

        export KFAPP="kfapp"
        pushd ${KFAPP}
        kfctl delete all --delete_storage
        popd
        sleep 60
      args:
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
