- name: Set up Kubernetes local cluster
  hosts: all
  roles:
    - install-k8s-jobs-dependences
  become: yes
  tasks:
    - name: Set up Kubernetes local cluster
      shell:
        cmd: |
          set -e
          apt-get install python-pip -y
          pip install -U python-openstackclient

          # NOTE: the following commands may include sensitive information please do not print in job logs
          export OS_PASSWORD="`echo {{ telekom_credentials.password }}`"
          export OS_AUTH_TYPE="`echo {{ telekom_credentials.auth_type }}`"
          export OS_AUTH_URL="`echo {{ telekom_credentials.auth_url }}`"
          export OS_IDENTITY_API_VERSION="`echo {{ telekom_credentials.identity_api_version }}`"
          export OS_DOMAIN_NAME="`echo {{ telekom_credentials.domain_name }}`"
          export OS_PROJECT_NAME="`echo {{ telekom_credentials.project_name}}`"
          export OS_REGION_NAME="`echo {{ telekom_credentials.region_name}}`"
          export OS_TENANT_NAME="`echo {{ telekom_credentials.project_name }}`"
          export OS_USERNAME="`echo {{ telekom_credentials.user_name }}`"
          export OS_ACCESS_KEY="`echo {{ telekom_credentials.access_key }}`"
          export OS_SECRET_KEY="`echo {{ telekom_credentials.secret_key }}`"
          if [[ ! -d "/etc/kubernetes/" ]]; then
              sudo mkdir -p /etc/kubernetes/
          fi
          chown zuul /etc/kubernetes/
          cat << EOF >> /etc/kubernetes/cloud-config
          [Global]
          domain-name= ${OS_DOMAIN_NAME}
          tenant-name = ${OS_TENANT_NAME}
          auth-url = ${OS_AUTH_URL}
          password = ${OS_PASSWORD}
          username = ${OS_USERNAME}
          region = ${OS_REGION_NAME}
          [BlockStorage]
          bs-version = v2
          EOF

          set -x
          make depend
          make build
          mkdir -p "{{ ansible_user_dir }}/.kube"
          export API_HOST_IP="172.17.0.1"
          export KUBELET_HOST="0.0.0.0"
          export WAIT_FOR_URL_API_SERVER=120

          echo "Stopping firewall and allow all traffic..."
          iptables -F
          iptables -X
          iptables -t nat -F
          iptables -t nat -X
          iptables -t mangle -F
          iptables -t mangle -X
          iptables -P INPUT ACCEPT
          iptables -P FORWARD ACCEPT
          iptables -P OUTPUT ACCEPT

          export ALLOW_SECURITY_CONTEXT=true
          export ENABLE_CRI=false
          export ENABLE_HOSTPATH_PROVISIONER=true
          export ENABLE_SINGLE_CA_SIGNER=true
          # export KUBE_ENABLE_CLUSTER_DASHBOARD=true
          export KUBE_ENABLE_CLUSTER_DNS=false
          export LOG_LEVEL=10

          # we want to use the openstack cloud provider
          export CLOUD_PROVIDER=openstack
          # we want to run a separate cloud-controller-manager for openstack
          export EXTERNAL_CLOUD_PROVIDER=true
          # DO NOT change the location of the cloud-config file. It's important for the old cinder provider to work
          export CLOUD_CONFIG=/etc/kubernetes/cloud-config
          # specify the OCCM binary
          # export EXTERNAL_CLOUD_PROVIDER_BINARY="{{ zuul.project.src_dir }}/openstack-cloud-controller-manager"
          # Kill existing processes
          ps -ef | grep -i -e etcd -e hyperkube | grep -v grep | awk '{print $2}' | xargs sudo kill -9
          # Cleanup some directories just in case
          sudo rm -rf /var/lib/kubelet/*

          # location of where the kubernetes processes log their output
          mkdir -p /opt/stack/logs/
          export LOG_DIR=/opt/stack/logs
          # We need this for one of the conformance tests
          export ALLOW_PRIVILEGED=true
          # Just kick off all the processes and drop down to the command line
          export ENABLE_DAEMON=true
          # We need the hostname to match the name of the vm started by openstack
          export HOSTNAME_OVERRIDE=$(hostname)

        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ golang_env }}'