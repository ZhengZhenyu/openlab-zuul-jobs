- name: Set up Kubernetes local cluster
  hosts: all
  become: yes
  tasks:
    - name: Set up Kubernetes local cluster
      shell:
        cmd: |
          set -e
          apt-get install python-pip -y
          pip install -U python-openstackclient

          # NOTE: the following commands may include sensitive information please do not print in job logs
          export OS_PASSWORD="`echo {{ telekom_credentials.password }}`"
          export OS_AUTH_TYPE="`echo {{ telekom_credentials.auth_type }}`"
          export OS_AUTH_URL="`echo {{ telekom_credentials.auth_url }}`"
          export OS_IDENTITY_API_VERSION="`echo {{ telekom_credentials.identity_api_version }}`"
          export OS_DOMAIN_NAME="`echo {{ telekom_credentials.domain_name }}`"
          export OS_PROJECT_NAME="`echo {{ telekom_credentials.project_name}}`"
          export OS_REGION_NAME="`echo {{ telekom_credentials.region_name}}`"
          export OS_TENANT_NAME="`echo {{ telekom_credentials.project_name }}`"
          export OS_USERNAME="`echo {{ telekom_credentials.user_name }}`"
          export OS_ACCESS_KEY="`echo {{ telekom_credentials.access_key }}`"
          export OS_SECRET_KEY="`echo {{ telekom_credentials.secret_key }}`"

          set -x
          # Install Make
          apt-get install make -y
          # Build cloud-provider-openstack binaries
          go get github.com/Masterminds/glide
          make depend
          make build
          # Build K8S
          go env
          go version
          go get -u github.com/jteeuwen/go-bindata/go-bindata || true
          go get -u github.com/cloudflare/cfssl/cmd/... || true
          # Get Kubernetes from source
          mkdir -p ${GOPATH}/src/k8s.io/
          if [ ! -d "${GOPATH}/src/k8s.io/kubernetes" ]; then
              git clone https://github.com/kubernetes/kubernetes ${GOPATH}/src/k8s.io/kubernetes
              pushd ${GOPATH}/src/k8s.io/kubernetes >/dev/null
              git remote update
              git fetch --all --tags --prune
              popd >/dev/null
          fi
          make -C ${GOPATH}/src/k8s.io/kubernetes WHAT="cmd/kubectl cmd/hyperkube"

          if [[ ! -d "/etc/kubernetes/" ]]; then
              sudo mkdir -p /etc/kubernetes/
          fi
          chown ubuntu /etc/kubernetes/
          cat << EOF >> /etc/kubernetes/cloud-config
          [Global]
          domain-name= ${OS_DOMAIN_NAME}
          tenant-name = ${OS_TENANT_NAME}
          auth-url = ${OS_AUTH_URL}
          password = ${OS_PASSWORD}
          username = ${OS_USERNAME}
          region = ${OS_REGION_NAME}
          [BlockStorage]
          bs-version = v2
          EOF

          # Install docker
          if ! dpkg -s "docker-engine" > /dev/null 2> /dev/null; then
              sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609
              sudo apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D || true
              sudo apt-add-repository 'deb http://apt.dockerproject.org/repo ubuntu-xenial main'
              sudo apt-get update -y
              sudo apt-cache policy docker-engine
              sudo apt-get install -y docker-engine=1.12.6-0~ubuntu-xenial
              sudo cat /lib/systemd/system/docker.service
              sudo sed -r -i "s|(ExecStart)=(.+)|\1=\2 --iptables=false|" /lib/systemd/system/docker.service
              sudo cat /lib/systemd/system/docker.service
              sudo systemctl daemon-reload
              sudo systemctl restart docker
              sudo systemctl status docker
              sudo ifconfig -a
          fi
          docker --version
          # Get the latest stable version of kubernetes
          export K8S_VERSION=$(curl -sS https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          echo "K8S_VERSION : ${K8S_VERSION}"
          echo "Starting docker service"
          sudo systemctl enable docker.service
          sudo systemctl start docker.service --ignore-dependencies
          echo "Checking docker service"
          sudo docker ps
          wget -c https://github.com/coreos/etcd/releases/download/v3.3.0/etcd-v3.3.0-linux-amd64.tar.gz
          tar xzvf etcd-v3.3.0-linux-amd64.tar.gz
          cp etcd-v3.3.0-linux-amd64/etcd /usr/local/bin/
          cp etcd-v3.3.0-linux-amd64/etcdctl /usr/local/bin/
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ golang_env }}'