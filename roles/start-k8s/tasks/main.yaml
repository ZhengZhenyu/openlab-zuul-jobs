- name: Start k8s
  shell:
    cmd: |
      set -x
      set -e
      set -o pipefail

      export API_HOST_IP=$(ifconfig | awk '/^docker0/ {getline; print $2}' | awk -F ':' '{print $2}')
      export KUBELET_HOST="0.0.0.0"
      export ALLOW_SECURITY_CONTEXT=true
      export ENABLE_CRI=false
      export ENABLE_HOSTPATH_PROVISIONER=true
      export ENABLE_SINGLE_CA_SIGNER=true
      export KUBE_ENABLE_CLUSTER_DNS=false
      export LOG_LEVEL=4
      # We want to use the openstack cloud provider
      export CLOUD_PROVIDER=openstack
      # We want to run a separate cloud-controller-manager for openstack
      export EXTERNAL_CLOUD_PROVIDER=true
      # DO NOT change the location of the cloud-config file. It is important for the old cinder provider to work
      export CLOUD_CONFIG=/etc/kubernetes/cloud-config
      # Specify the OCCM binary
      export EXTERNAL_CLOUD_PROVIDER_BINARY=./openstack-cloud-controller-manager

      # location of where the kubernetes processes log their output
      mkdir -p '{{ ansible_user_dir }}/workspace/logs/kubernetes'
      export LOG_DIR='{{ ansible_user_dir }}/workspace/logs/kubernetes'
      # We need this for one of the conformance tests
      export ALLOW_PRIVILEGED=true
      # Just kick off all the processes and drop down to the command line
      export ENABLE_DAEMON=true
      export HOSTNAME_OVERRIDE=$(curl http://169.254.169.254/openstack/latest/meta_data.json | python -c "import sys, json; print json.load(sys.stdin)['name']")
      export MAX_TIME_FOR_URL_API_SERVER=5

      # -E preserves the current env vars, but we need to special case PATH
      sudo -E PATH=$PATH SHELLOPTS=$SHELLOPTS "$GOPATH/src/k8s.io/kubernetes/hack/local-up-cluster.sh" -O
    executable: /bin/bash
    chdir: '{{ zuul.project.src_dir }}'
  environment: '{{ golang_env }}'
